#红黑树
常用说明: 节点(node)
1.父节点  (node.parent)
2.祖父节点 (node.parent.parent)
3.叔父节点 (node.parent.left/right)

5大特点:

1. 所有的节点非红及黑
2. 根节点必须是红色
3. 从根节点到任意叶子节点的 黑节点数量 必须相同
4. 从根节点到任意节点链路中, 不得有连续两个相连的红色节点
    4-1: 红色节点的父节点必须是黑色
    4-2: 红色节点的叶子节点必须是黑色
5. 所有的叶子节点必须是黑色节点

#添加: 添加有以下四种情况 (注:添加的新节点默认为 红色)

1.添加的节点父节点为 黑色
不做任何处理, 不影响原有数据

2.添加的节点 叔父节点为红色节点
执行步骤:
2-1.染色:
    2-1-1: 父节点变为黑色
    2-1-2: 叔父节点变为黑色
    2-1-3: 祖父节点变为红色 变为新节点,进行添加(递归调用添加方法)

3.添加的节点 叔父节点不为红色节点
分为四种情况:
    3-1:父节点为祖父节点的 左节点. 添加的节点落在父节点的左边 //LL
        3-1-1: 染色:
                   3-1-1-1: 父节点变为黑色. 祖父节点变为红色
        3-1-2: 旋转:
                   2-1-2-1: 对祖父节点进行  右旋转

    3-2:父节点为祖父节点的 左节点. 添加的节点落在父节点的右边 //LR
        3-2-1: 染色:
                   3-2-1-1: 自身变为黑色. 祖父节点变为红色
        3-2-2  旋转:
                   3-2-1-2: 父节点进行 左旋转, 祖父节点进行右旋转

    3-3:父节点为祖父节点的 右节点, 添加的节点落在父节点的右边 //RR
        3-3-1: 染色:
                   3-3-1-1: 父节点变为黑色. 祖父节点变为红色
        3-3-2: 旋转:
                   3-3-2-1: 对祖父节点进行  左旋转

    3-4:父节点为祖父节点的 右节点, 添加的节点落在父节点的左边 //RL
        3-4-1: 染色:
                   3-4-1-1: 自身变为黑色. 祖父节点变为红色
        3-4-2: 旋转:
                   3-4-2-1: 对父节点进行 右旋转, 祖父节点进行 左旋转



